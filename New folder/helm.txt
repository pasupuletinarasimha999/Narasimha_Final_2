helm install nginx
helm install firstapp CHARTNAME
helm install firstapp CHARTNAME --namespace=db1
helm install firstapp CHARTNAME --values values.yml --namespace=db2
helm install my-database stable/mysql --set rootPassword=password123
helm uninstall my-database
helm uninstall my-database --dry-run
helm rollback [RELEASE_NAME] [REVISION] [flags]
helm upgrade my-database stable/mysql
helm upgrade my-database stable/mysql --force
helm repo list
helm repo add myrepo https://my-custom-repo.com/index.yaml
helm uninstall myrepo
helm repo update
helm search
helm search stable/wordpress
helm history my-database
helm history my-database --length 2
helm get my-database
helm get my-database --manifest
helm get values mydb --all
helm create mychart
helm create mychart --license apache
helm package mychart
helm package mychart -d DESTINATIONADDRESS
helm template mychart --set image.tag=v2.0.0
helm template mydb bitnami/sql --values=values.yml
helm lint firstchart
helm rollback mydb 1
helm dependency update CHARTNAME //use this if we update any dependencies in chart.yaml
helm pull mychart 
helm pull mychart:1.2.3 
helm pull stable/nginx --repo https://my-registry.com
helm push mychart-0.1.0.tgz oci://registry.example.com/charts
helm push mychart-0.1.0.tgz oci://registry.example.com/charts -u myusername -p mypassword
gng --full-generate-key
gng --export-secret-keys > ~/.gnupg/secring.gnupg
helm package --sign --key bharath@helm.com --keyring ~/.gnupg/secring.gnupg firstchart -d chartsrepo
helm verify chartname --keyring ~/.gnupg/secring.gnupg
helm install --verify --keyring ~/.gnupg/secring.gpg temprelease localrepo/firstchart
helm plugin install [plugin-name]
helm plugin install --repository [repo-url] [plugin-name]
helm plugin install ./path/to/plugin
helm myplugin <command>  # Replace `<command>` with actual command defined in script.sh
helm myplugin run




Chart.yaml
==========
# Chart.yaml
apiVersion: v2
name: nginx
description: A simple Helm chart for deploying Nginx

# Define the minimal compatible Kubernetes version
kubeVersion: ">= 1.16.0"

# Define chart type (application or library)
type: application

# Optional: Define chart keywords for searchability
keywords:
  - nginx
  - webserver

# Define chart sources (optional)
# sources:
#  - https://github.com/your-org/helm-charts

# Define dependencies on other charts (optional)
# dependencies:
#  - name: mysql
#    version: 8.0.17
#    repository: https://charts.bitnami.com/stable

# Define chart maintainer information (optional)
# maintainer:
#  name: Your Name
#  email: your_email@example.com

# Define the application version. This should follow Semantic Versioning (SemVer)
version: 1.0.0
=========================================================
Helper
======
{{- define "fullName" -}}
{{ .Release.Name }}-{{ .Chart.Name }}
{{- end }}

{{- define "imageFullName" -}}
{{ .Values.image.repository }}:{{ .Values.image.tag }}
{{- end }}

Deployment.yaml (using helper functions):

YAML
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullName" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "fullName" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullName" . }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "imageFullName" . }}
        ports:
        - containerPort: {{ .Values.containerPort }}
==========================================================
with, range, if, define in helm
================================
{{- range .Values.services }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  selector:
    app: {{ .name }}
  ports:
  {{- with .ports }}
  - port: {{ .port }}
    targetPort: {{ .targetPort }}
    protocol: {{ .protocol }}
  {{- end }}
{{- end }}

resources:
{{- range .Values.resources }}
  - name: {{ .name }}
    kind: {{ .kind }}
    apiVersion: {{ .apiVersion }}
    spec:
      replicas: {{ .replicas }}
  {{- end }}

{{- if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: {{ .Values.replicas }}
  # ... rest of the deployment definition
{{- end }}

{{- define "fullName" -}}
{{ .Release.Name }}-{{ .Chart.Name }}
{{- end }}

apiVersion: v1
kind: Service
metadata:
  name: {{ template "fullName" . }}
  # ... rest of the service definition
==============================================================
Import values from child chart in helm
==========================
parent/Chart.yaml
-------------------
dependencies:
  - name: my-child-chart
    version: 1.0.0
    repository: https://my-repo.com/charts
    imports:
      - database.host
      - database.user

child/Chart.yaml
---------------
exports:
  database:
    host: {{ .Values.database.host }}
    user: {{ .Values.database.user }}
=======================================================
hooks
------
pre-install: Runs before any resources are created in the cluster.
post-install: Runs after all resources are installed in the cluster.
pre-delete: Runs before any resources are deleted from the cluster.
post-delete: Runs after all resources are deleted from the cluster.
pre-upgrade: Runs before any resources are upgraded in the cluster.
post-upgrade: Runs after all resources are upgraded in the cluster.
test: Intended for testing purposes, runs a separate pod to perform checks.

helm install mychart ./chart --set some.value=example --pre-install
helm upgrade mychart ./chart --set some.value=updated --post-upgrade

Custom plugin
===========
# plugin.yaml
name: myplugin
usage: "helm myplugin <command>"
description: "A sample Helm plugin for demonstration purposes."
command: "./script.sh"  # Replace with actual script path if applicable
