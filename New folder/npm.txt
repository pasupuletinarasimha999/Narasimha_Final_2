What is npm?
A1: npm stands for Node Package Manager. It is a package manager for JavaScript and is the default package manager for the JavaScript runtime environment Node.js. It helps developers to install, share, and manage dependencies in their projects.

Q2: How do you install npm?
A2: npm is installed automatically when you install Node.js. You can download Node.js (which includes npm) from the official Node.js website.

Q3: How do you check the version of npm installed on your system?
A3: You can check the version of npm by running the following command in your terminal or command prompt:
npm -v

Q4: How do you initialize a new npm project?
A4: You can initialize a new npm project by running the following command and following the prompts:
npm init
For a quicker setup with default values, you can use:
npm init -y

Q5: How do you install a package using npm?
A5: You can install a package using the following command:
npm install <package-name>
For example, to install the express package, you would run:
npm install express

Intermediate Questions
Q6: What is the package.json file?
A6: The package.json file is a JSON file that contains metadata about your project and its dependencies. It includes information such as the project name, version, description, main file, scripts, and a list of dependencies.

Q7: How do you install a specific version of a package?
A7: You can install a specific version of a package by specifying the version number in the install command:
npm install <package-name>@<version>
For example, to install version 4.17.1 of the express package, you would run:
npm install express@4.17.1

Q8: How do you install a package globally?
A8: You can install a package globally by using the -g flag:
npm install -g <package-name>
For example, to install the nodemon package globally, you would run:
npm install -g nodemon

Q9: How do you update a package to the latest version?
A9: You can update a package to the latest version using the following command:
npm update <package-name>

Q10: What is the node_modules folder?
A10: The node_modules folder is where npm stores all the installed packages and their dependencies for your project. This folder is automatically created when you install packages using npm.

Advanced Questions
Q11: How do you create a custom npm script?
A11: You can create custom npm scripts by adding them to the scripts section of your package.json file. For example:
{
  "scripts": {
    "start": "node app.js",
    "test": "mocha"
  }
}
You can then run these scripts using:
npm run start
npm run test

Q12: How do you publish a package to the npm registry?
A12: To publish a package to the npm registry, follow these steps:
Ensure you have a package.json file with the necessary metadata.
Run the following command to log in to your npm account:
npm login
Run the following command to publish your package:
npm publish

Q13: How do you handle peer dependencies in npm?
A13: Peer dependencies are specified in the package.json file under the peerDependencies section. They are used to specify that your package is compatible with a specific version of another package. For example:
{
  "peerDependencies": {
    "react": "^17.0.0"
  }
}

Q14: How do you use npm to run a script defined in a package installed locally?
A14: You can use npx to run a script defined in a locally installed package. For example, if you have eslint installed locally, you can run it using:
npx eslint .

Q15: How do you configure npm to use a different registry?
A15: You can configure npm to use a different registry by running the following command:
npm config set registry <registry-url>

For example, to use the npm registry provided by GitHub Packages, you would run:
npm config set registry https://npm.pkg.github.com/

How do you ensure that the same versions of npm packages are used across different environments?
To ensure that the same versions of npm packages are used across different environments, you can use a package-lock.json file. This file is automatically generated when you run npm install and locks the versions of the installed packages.

How do you handle environment-specific configurations in an npm project?
Environment-specific configurations can be handled using environment variables and configuration files. You can use packages like dotenv to load environment variables from a .env file.
npm install dotenv
require('dotenv').config();
Load the environment variables in your application:
const dbUrl = process.env.DATABASE_URL;

How do you optimize npm install times in a CI/CD pipeline?
To optimize npm install times in a CI/CD pipeline, you can:
Cache node_modules: Use the caching mechanism provided by your CI/CD tool to cache the node_modules directory.
Use npm ci: This command is faster than npm install and is designed for CI environments. It installs dependencies based on the package-lock.json file and ensures a clean state by removing the existing node_modules directory.-->npm ci
Use a private npm registry: If you have a large number of internal packages, using a private npm registry can reduce install times.

How do you handle security vulnerabilities in npm packages in a DevOps pipeline?
Use npm audit: This command checks for known vulnerabilities in your dependencies.--> npm audit

How do you integrate npm with containerization tools like Docker in a DevOps pipeline?
To integrate npm with Docker in a DevOps pipeline, you can create a Dockerfile that includes the necessary steps to install Node.js, npm, and your project dependencies.
# Use an official Node.js runtime as a parent image
FROM node:14
# Set the working directory
WORKDIR /usr/src/app
# Copy package.json and package-lock.json
COPY package*.json ./
# Install dependencies
RUN npm install
# Copy the rest of the application code
COPY . .
# Expose the application port
EXPOSE 8080
# Define the command to run the application
CMD ["node", "app.js"]

list me most used npm commands during jenkins build pipeline
1. npm install -> Installs all the dependencies listed in the package.json file.
2. npm ci -> Installs dependencies from the package-lock.json file, ensuring a clean state by removing the existing node_modules directory. This command is faster and more reliable for CI environments.
3. npm test -> Runs the test scripts defined in the package.json file.
4. npm run <script> -> Runs a custom script defined in the scripts section of the package.json file. Common scripts include build, lint, start, etc.
5. npm audit -> Checks for known vulnerabilities in the dependencies and provides a report.
6. npm audit fix -> Automatically fixes vulnerabilities in the dependencies if possible.
7. npm version <update_type> -> Bumps the version number in the package.json file. <update_type> can be patch, minor, or major.
8. npm publish -> Publishes the package to the npm registry. This is often used in pipelines for libraries or tools that need to be distributed.
9. npm cache clean --force -> Cleans the npm cache. This can be useful to resolve issues related to corrupted cache.
10. npx <command> -> Executes a package binary without installing it globally. This is useful for running tools like eslint, jest, or webpack directly.

Important files in npm project
1. package.json -> It contains metadata about the project, including its name, version, description, main entry point, scripts, dependencies, and more.
2. package-lock.json -> This file is automatically generated when you run npm install. It locks the versions of the installed packages, ensuring that the same versions are used across different environments. If the package-lock.json file is present, npm will prioritize it over the package.json file for determining which versions of dependencies to install.The file contains detailed information about each dependency, including the version, resolved URL, integrity hash, and any nested dependencies.


when one should use npm ci and npm install?
npm install: The primary purpose of npm install is to install all the dependencies listed in the package.json file. Installs dependencies listed in package.json and updates the node_modules directory.If package-lock.json is present, it will use the versions specified in the lock file. If not, it will resolve versions based on the package.json file and update the lock file accordingly.Can be used to add new dependencies to the project.

npm ci: The primary purpose of npm ci (short for "clean install") is to provide a faster, more reliable way to install dependencies in continuous integration (CI) environments.It ensures a clean and consistent installation of dependencies based on the package-lock.json file.Deletes the node_modules directory and installs dependencies exactly as specified in the package-lock.json file.Faster than npm install because it skips the version resolution step and directly installs the versions specified in the lock file.

From where npm will download dependencies after seeing package.json file?
When you run npm install or npm ci, npm downloads the dependencies specified in your package.json file from the npm registry (https://registry.npmjs.org/.)
You can configure npm to use a custom registry instead of the default npm registry. This is useful for private packages or for using a different package registry service.
    npm config set registry <registry-url>
You can also specify a custom registry in an .npmrc file, either globally or locally in your project.
    registry=https://custom-registry.example.com/
Location of nmprc:
    Global .npmrc:
        On Unix-based systems (Linux, macOS): ~/.npmrc
        On Windows: %USERPROFILE%\.npmrc (e.g., C:\Users\YourUsername\.npmrc)
    Project .npmrc:
        <project-root>/.npmrc
    Per-Package .npmrc:
        <project-root>/node_modules/<package>/.npmrc

What is the difference between dependencies and devDependencies in package.json?
Answer:
dependencies: These are the packages required for the application to run in production. They are listed under the dependencies section in package.json.
devDependencies: These are the packages required only during the development phase, such as testing libraries, linters, and build tools. They are listed under the devDependencies section in package.json.

How do you update a package to its latest version using npm?
Answer: You can update a package to its latest version using the following command:
npm update <package-name>
To update all packages to their latest versions, you can run:
npm update

How do you uninstall a package using npm?
Answer: You can uninstall a package using the following command:
npm uninstall <package-name>

How do you run a custom npm script?
Answer: You can run a custom npm script using the following command:
npm run <script-name>
For example, to run the build script:
npm run build

What is the purpose of the .npmrc file?
Answer: The .npmrc file is a configuration file for npm that allows you to customize various settings, such as the registry URL, authentication tokens, and proxy settings. It can exist globally, per-user, or per-project.

How do you configure a custom npm registry?
Answer: You can configure a custom npm registry using the following command:
npm config set registry <registry-url>
Or by adding the registry URL to the .npmrc file:
registry=https://custom-registry.example.com/

What are scoped packages, and how do you create one?
Answer: Scoped packages are namespaced packages that start with an @ symbol followed by the scope name. They help organize packages and avoid naming conflicts. To create a scoped package, use the following command:
npm init --scope=@my-scope

How do you manage multiple versions of Node.js and npm on the same machine?
Answer: You can manage multiple versions of Node.js and npm using version managers like nvm (Node Version Manager). Install nvm and use it to install and switch between different Node.js versions.

How do you set environment variables for npm scripts?
Answer: You can set environment variables for npm scripts directly in the script definition or by using a .env file with a tool like dotenv. Example:
"scripts": {
  "start": "NODE_ENV=production node index.js"
}

How do you configure npm to use a proxy server?
Answer: You can configure npm to use a proxy server using the following commands:
npm config set proxy http://proxy.example.com:8080
npm config set https-proxy http://proxy.example.com:8080

How do you override global npm settings for a specific project?
Answer: You can override global npm settings for a specific project by adding a .npmrc file in the project root directory with the desired settings.

How do you configure npm to use a different cache directory?
Answer: You can configure npm to use a different cache directory using the following command:
npm config set cache <path-to-cache-directory>

How do you set up npm to use a private registry for specific scopes?
Answer: You can set up npm to use a private registry for specific scopes by adding the following to your .npmrc file:
@my-scope:registry=https://custom-registry.example.com/

How do you configure npm to use authentication tokens?
Answer: You can configure npm to use authentication tokens by adding the token to your .npmrc file:
//registry.npmjs.org/:_authToken=YOUR_AUTH_TOKEN

How do you handle npm configuration in a CI/CD pipeline?
Answer: In a CI/CD pipeline, you can handle npm configuration by setting environment variables, using a project-specific .npmrc file, or configuring npm settings directly in the pipeline configuration file.

How do you use .npmrc files to manage different environments?
Answer: You can use different .npmrc files for different environments by creating environment-specific .npmrc files and copying or linking them as needed. For example, you can have .npmrc.dev, .npmrc.staging, and .npmrc.prod files and switch between them based on the environment.

what is the cache location in npm: npm config get cache
npm config set cache <path-to-cache-directory>
cache=/path/to/custom/npm-cache
npm cache clean --force
