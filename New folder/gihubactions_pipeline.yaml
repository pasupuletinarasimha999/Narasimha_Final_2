# .github/workflows/ci-pipeline.yml
name: CI Pipeline

on:
  push:
    branches:
      - main

env:
  GLOBAL_VAR: value

jobs:
  example-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10, 12, 14]
    env:
      JOB_VAR: value
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: $${{ matrix.node-version }}

      - name: Example step
        run: echo $${{ env.GLOBAL_VAR }} $${{ env.JOB_VAR }}

  test:
    runs-on: ubuntu-latest
    needs: example-job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Run tests
        run: echo "Testing"

# .github/workflows/approval-and-deployment.yml
name: Approval and Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  approval:
    runs-on: ubuntu-latest
    steps:
      - name: Awaiting approval
        run: echo "Please approve this job in the GitHub UI."

  deploy:
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: $${{ runner.os }}-node-$${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            $${{ runner.os }}-node-

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Deploy application
        run: npm run deploy
        continue-on-error: true

# .github/workflows/scheduled-workflow.yml
name: Scheduled Workflow

on:
  schedule:
    - cron: '0 0 * * *'

jobs:
  example-job:
    uses: owner/repo/.github/workflows/workflow.yml@main
    ================================================================================

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

env:
  GLOBAL_VAR: value

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: $${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=my_project_key \
            -Dsonar.organization=my_organization \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$${{ secrets.SONAR_TOKEN }}

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12, 14, 16]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: $${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: $${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/*.json
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Start application
        run: npm start &

      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          start: npm start
          wait-on: http://localhost:3000
          runTests: npm run cypress:run

  build:
    runs-on: ubuntu-latest
    needs: [lint, static-analysis, unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

  approval:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Awaiting approval
        run: echo "Please approve this job in the GitHub UI."

  deploy:
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: $${{ runner.os }}-node-$${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Deploy application
        run: npm run deploy
        continue-on-error: true

=====================
keys used under jobs
straategy
services
output
runs-on
===========================================

Github Actions -> Sonarqube ->synk(dependencies scanner) -> checkov(docker file scan) -> docker build ->trivy(container image scanning) -> container signing -> kubernetes
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build the application
        run: |
          echo "Building the application..."
          ./build_script.sh  # Replace with your actual build script
        env:
          CI: true

  sast:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v1.5
        with:
          args: >
            -Dsonar.projectKey=$SONAR_PROJECT_KEY
            -Dsonar.organization=$SONAR_ORGANIZATION
            -Dsonar.sources=.
            -Dsonar.host.url=$SONAR_HOST_URL
            -Dsonar.login=$SONAR_TOKEN

  sca:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions@v1
        with:
          args: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov scan on Dockerfile
        run: checkov -d .

  container_build:
    runs-on: ubuntu-latest
    needs: [build, sast, sca, docker_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  container_scan:
    runs-on: ubuntu-latest
    needs: container_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy scan on Docker image
        run: trivy image ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  deploy_test:
    runs-on: ubuntu-latest
    needs: container_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Test environment
        run: kubectl apply -f k8s/test-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG_TEST }}

  deploy_preprod:
    runs-on: ubuntu-latest
    needs: deploy_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Pre-Production environment
        run: kubectl apply -f k8s/preprod-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG_PREPROD }}

  deploy_prod:
    runs-on: ubuntu-latest
    needs: deploy_preprod
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Production environment
        run: kubectl apply -f k8s/prod-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG_PROD }}
    environment:
      name: production
      url: http://your-production-url
    # Manual approval step
    environment:
      name: production
      url: http://your-production-url
      reviewers:
        - your-github-username

  dast:
    runs-on: ubuntu-latest
    needs: deploy_prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install OWASP ZAP
        run: |
          sudo apt-get update
          sudo apt-get install -y zaproxy

      - name: Run OWASP ZAP scan
        run: |
          zap-cli start
          zap-cli open-url http://your-app-url
          zap-cli spider http://your-app-url
          zap-cli active-scan http://your-app-url
          zap-cli report -o zap_report.html -f html
      artifacts:
        files:
          - zap_report.html